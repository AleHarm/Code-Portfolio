From dd5817db8763147225486749e47f1d6843a6d551 Mon Sep 17 00:00:00 2001
From: AlexHarmon2282 <aharmon@moxiepestcontrol.com>
Date: Sat, 20 Jan 2024 09:23:10 -0700
Subject: [PATCH] Complete tutorial

---
 .../learn/hellojunit5/JUnit5AppTest.java      | 413 ++++++++++--------
 1 file changed, 223 insertions(+), 190 deletions(-)

diff --git a/src/test/java/com/makotojava/learn/hellojunit5/JUnit5AppTest.java b/src/test/java/com/makotojava/learn/hellojunit5/JUnit5AppTest.java
index d67538c..ebf6c99 100644
--- a/src/test/java/com/makotojava/learn/hellojunit5/JUnit5AppTest.java
+++ b/src/test/java/com/makotojava/learn/hellojunit5/JUnit5AppTest.java
@@ -19,34 +19,61 @@ import org.slf4j.LoggerFactory;
  * 
  * Class-level Exercises:
  * <ol>
- * <li>Enable Eclipse JUnit support for this test class using the {@link org.junit.runner.RunWith @RunWith} and
+ * <li>Enable Eclipse JUnit support for this test class using the
+ * {@link org.junit.runner.RunWith @RunWith} and
  * {@link org.junit.platform.runner.JUnitPlatform
  * JUnitPlatform} class.</li>
- * <li>Give the class a cool {@link org.junit.jupiter.api.DisplayName @DisplayName} that shows up in the JUnit test
+ * <li>Give the class a cool
+ * {@link org.junit.jupiter.api.DisplayName @DisplayName} that shows up in the
+ * JUnit test
  * report.</li>
  * </ol>
  *
  */
+
+@RunWith(JUnitPlatform.class)
+@DisplayName("Dank Tests")
 public class JUnit5AppTest {
 
   // Create a JDK Logger here
+  private static final Logger log = LoggerFactory.getLogger(JUnit5AppTest.class);
 
   // Create a fixture for the class under test
+  private App classUnderTest;
 
   // Do something before ANY test is run in this class
+  @BeforeAll
   public static void init() {
+    log.info("Doing something before everything else");
   }
 
   // Do something after ALL tests in this class are run
+  @AfterAll
   public static void done() {
+    log.info("The last thing to be done");
   }
 
   // Create an instance of the test class before each @Test method is executed
+  @BeforeEach
+  public void setUp() throws Exception {
+    log.info("Setting stuff up");
+    classUnderTest = new App();
+  }
 
-  // Destroy reference to the instance of the test class after each @Test method is executed
+  // Destroy reference to the instance of the test class after each @Test method
+  // is executed
+  @AfterEach
+  public void destruction() throws Exception {
+    log.info("Hulk smash, no more class");
+    classUnderTest = null;
+  }
 
   // Disabled test
+  @Test
+  @Disabled
+  @DisplayName("It don't work")
   void testNotRun() {
+    log.info("It done been disabled");
   }
 
   /**
@@ -54,151 +81,185 @@ public class JUnit5AppTest {
    * <ol>
    * <li>Tell JUnit this method is a test method.</li>
    * <li>Give it a cool display name for the test report.</li>
-   * <li>The reference to the class under test cannot be null. If it is, the test should fail.</li>
-   * <li>Create a group of three tests of the add methods with the following arrays of positive numbers:
+   * <li>The reference to the class under test cannot be null. If it is, the test
+   * should fail.</li>
+   * <li>Create a group of three tests of the add methods with the following
+   * arrays of positive numbers:
    * <ol>
    * <li>1, 2, 3, 4</li>
    * <li>20, 934, 110</li>
    * <li>2, 4, 6</li>
    * </ol>
-   * Ensure the actual sum matches the expected sum for each group of numbers. Make sure that all groups of numbers are
+   * Ensure the actual sum matches the expected sum for each group of numbers.
+   * Make sure that all groups of numbers are
    * tested (i.e., if one fails, it should not fail the test method). Hint: use
-   * {@link org.junit.jupiter.api.Assertions#assertAll(org.junit.jupiter.api.function.Executable...) assertAll()}
+   * {@link org.junit.jupiter.api.Assertions#assertAll(org.junit.jupiter.api.function.Executable...)
+   * assertAll()}
    * </ol>
    */
+
+  @Test
+  @DisplayName("Positive numbers")
   public void testAdd() {
-    //
-    // EXERCISE: TODO: ADD CODE HERE (See Javadoc comments for instructions. Use the Javadoc View in Eclipse to see the
-    // buttery smooth javadoc above.)
-    //
-    fail("Test not implemented!");
+
+    assertNotNull(classUnderTest);
+
+    assertAll(
+        () -> {
+          long[] numbersToSum = { 1, 2, 3, 4 };
+          long expectedSum = 10;
+          long actualSum = classUnderTest.add(numbersToSum);
+          assertEquals(expectedSum, actualSum);
+        },
+        () -> {
+          long[] numbersToSum = new long[] { 20, 934, 110 };
+          long expectedSum = 1064;
+          long actualSum = classUnderTest.add(numbersToSum);
+          assertEquals(expectedSum, actualSum);
+        },
+        () -> {
+          long[] numbersToSum = new long[] { 2, 4, 6 };
+          long expectedSum = 12;
+          long actualSum = classUnderTest.add(numbersToSum);
+          assertEquals(expectedSum, actualSum);
+        });
   }
 
   /**
    * Class-level Exercises:
    * <ol>
-   * <li>Make this class a nested test class (hint: use {@link org.junit.jupiter.api.Nested @Nested}).
-   * <li>Give the class a cool {@link org.junit.jupiter.api.DisplayName @DisplayName} that shows up in the JUnit test
+   * <li>Make this class a nested test class (hint: use
+   * {@link org.junit.jupiter.api.Nested @Nested}).
+   * <li>Give the class a cool
+   * {@link org.junit.jupiter.api.DisplayName @DisplayName} that shows up in the
+   * JUnit test
    * report.</li>
-   * <li>Create an instance of the {@link com.makotojava.learn.hellojunit5.App App} class specifically for this nested
+   * <li>Create an instance of the {@link com.makotojava.learn.hellojunit5.App
+   * App} class specifically for this nested
    * class:
    * <ul>
-   * <li>Set the <code>classUnderTest</code> variable in a method called <code>setUp()</code> that runs before the test
-   * method does (hint: use {@link org.junit.jupiter.api.BeforeEach @BeforeEach})</li>
+   * <li>Set the <code>classUnderTest</code> variable in a method called
+   * <code>setUp()</code> that runs before the test
+   * method does (hint: use
+   * {@link org.junit.jupiter.api.BeforeEach @BeforeEach})</li>
    * </ul>
-   * <li>Set the <code>classUnderTest</code> variable to null in a method called <code>tearDown()</code> that runs after
+   * <li>Set the <code>classUnderTest</code> variable to null in a method called
+   * <code>tearDown()</code> that runs after
    * the
-   * test method does (hint: use {@link org.junit.jupiter.api.BeforeEach @AfterEach})</li>
+   * test method does (hint: use
+   * {@link org.junit.jupiter.api.BeforeEach @AfterEach})</li>
    * </ol>
    * 
    */
+
+  @Nested
+  @DisplayName("Negative numbers")
   class NegativeNumbersTest {
 
-    /**
-     * testAdd() - Exercises:
-     * <ol>
-     * <li>Tell JUnit this method is a test method.</li>
-     * <li>Give it a cool display name for the test report.</li>
-     * <li>The reference to the class under test cannot be null. If it is, the test should fail.</li>
-     * <li>Create a group of three tests of the add methods with the following arrays of positive numbers:
-     * <ol>
-     * <li>-1, -2, -3, -4</li>
-     * <li>-20, -934, -110</li>
-     * <li>-2, -4, -6</li>
-     * </ol>
-     * Ensure the actual sum matches the expected sum for each group of numbers. Make sure that all groups of numbers
-     * are
-     * tested (i.e., if one fails, it should not fail the test method). Hint: use
-     * {@link org.junit.jupiter.api.Assertions#assertAll(org.junit.jupiter.api.function.Executable...) assertAll()}
-     * </ol>
-     */
+    private App classUnderTest;
+
+    @BeforeEach
+    public void setUp() throws Exception {
+      classUnderTest = new App();
+    }
+
+    @AfterEach
+    public void tearDown() throws Exception {
+      classUnderTest = null;
+    }
+
+    @Test
+    @DisplayName("Negative numbers tests")
     public void testAdd() {
-      //
-      // EXERCISE: TODO: ADD CODE HERE (See Javadoc comments for instructions. Use the Javadoc View in Eclipse to see
-      // the buttery smooth javadoc above.)
-      //
-      fail("Test not implemented!");
+      assertNotNull(classUnderTest);
+      assertAll(
+          () -> {
+            long[] numbersToSum = { -1, -2, -3, -4 };
+            long expectedSum = -10;
+            long actualSum = classUnderTest.add(numbersToSum);
+            assertEquals(expectedSum, actualSum);
+          },
+          () -> {
+            long[] numbersToSum = { -20, -934, -110 };
+            long expectedSum = -1064;
+            long actualSum = classUnderTest.add(numbersToSum);
+            assertEquals(expectedSum, actualSum);
+          },
+          () -> {
+            long[] numbersToSum = new long[] { -2, -4, -6 };
+            long expectedSum = -12;
+            long actualSum = classUnderTest.add(numbersToSum);
+            assertEquals(expectedSum, actualSum);
+          });
     }
   }
 
   /**
    * Class-level Exercises:
    * <ol>
-   * <li>Make this class a nested test class (hint: use {@link org.junit.jupiter.api.Nested @Nested}).
-   * <li>Give the class a cool {@link org.junit.jupiter.api.DisplayName @DisplayName} that shows up in the JUnit test
+   * <li>Make this class a nested test class (hint: use
+   * {@link org.junit.jupiter.api.Nested @Nested}).
+   * <li>Give the class a cool
+   * {@link org.junit.jupiter.api.DisplayName @DisplayName} that shows up in the
+   * JUnit test
    * report.</li>
    * </ol>
    * 
    */
+  @Nested
+  @DisplayName("Positive and negative numbers")
   class PositiveAndNegativeNumbersTest {
 
-    /**
-     * testAdd() - Exercises:
-     * <ol>
-     * <li>Tell JUnit this method is a test method.</li>
-     * <li>Give it a cool display name for the test report.</li>
-     * <li>The reference to the class under test cannot be null. If it is, the test should fail.</li>
-     * <li>Create a group of three tests of the add methods with the following arrays of positive numbers:
-     * <ol>
-     * <li>-1, 2, -3, 4</li>
-     * <li>-20, 934, -110</li>
-     * <li>-2, -4, 6</li>
-     * </ol>
-     * Ensure the actual sum matches the expected sum for each group of numbers. Make sure that all groups of numbers
-     * are
-     * tested (i.e., if one fails, it should not fail the test method). Hint: use
-     * {@link org.junit.jupiter.api.Assertions#assertAll(org.junit.jupiter.api.function.Executable...) assertAll()}
-     * </ol>
-     */
+    @Test
+    @DisplayName("Positive and negative numbers tests")
     public void testAdd() {
-      //
-      // EXERCISE: TODO: ADD CODE HERE (See Javadoc comments for instructions. Use the Javadoc View in Eclipse to see
-      // the buttery smooth javadoc above.)
-      //
-      fail("Test not implemented!");
+      assertNotNull(classUnderTest);
+      assertAll(
+          () -> {
+            long[] numbersToSum = { -1, 2, -3, 4 };
+            long expectedSum = 2;
+            long actualSum = classUnderTest.add(numbersToSum);
+            assertEquals(expectedSum, actualSum);
+          },
+          () -> {
+            long[] numbersToSum = { -20, 934, -110 };
+            long expectedSum = 804;
+            long actualSum = classUnderTest.add(numbersToSum);
+            assertEquals(expectedSum, actualSum);
+          },
+          () -> {
+            long[] numbersToSum = new long[] { -2, -4, 6 };
+            long expectedSum = 0;
+            long actualSum = classUnderTest.add(numbersToSum);
+            assertEquals(expectedSum, actualSum);
+          });
     }
 
-    /**
-     * testAdd_OnlyOnFriday - Exercises:
-     * <ol>
-     * <li>Tell JUnit this method is a test method.</li>
-     * <li>Give it a cool display name for the test report.</li>
-     * <li>Use the JDK 8 Date/Time API to get the current local date/time, along with a simple Assumption (hint: use
-     * {@link org.junit.jupiter.api.Assumptions#assumeTrue(boolean) assumeTrue()}) that today is Friday
-     * (or any other day of the week of your choosing, just so you pick one), or the test is skipped.</li>
-     * <li>Pass the following numbers as operands to the {@link com.makotojava.learn.hellojunit5.App#add(long[]) add}
-     * method: 1, 2, 3, 4, 5</li>
-     * <li>Ensure the actual sum matches the expected sum.</li>
-     * </ol>
-     */
+    @Test
+    @DisplayName("Only runs Fridays")
     public void testAdd_OnlyOnFriday() {
-      //
-      // EXERCISE: TODO: ADD CODE HERE (See Javadoc comments for instructions. Use the Javadoc View in Eclipse to see
-      // the buttery smooth javadoc above.)
-      //
-      fail("Test not implemented!");
+      assertNotNull(classUnderTest);
+      LocalDateTime ldt = LocalDateTime.now();
+      assumeTrue(ldt.getDayOfWeek().getValue() == 5);
+      assumeTrue(ldt.getDayOfWeek().getValue() == 5);
+      long[] operands = { 1, 2, 3, 4, 5 };
+      long expectedSum = 15;
+      long actualSum = classUnderTest.add(operands);
+      assertEquals(expectedSum, actualSum);
     }
 
-    /**
-     * testAdd_OnlyOnFriday_WithLambda - Exercises:
-     * <ol>
-     * <li>Tell JUnit this method is a test method.</li>
-     * <li>Give it a cool display name for the test report.</li>
-     * <li>Use the JDK 8 Date/Time API to get the current local date/time, along with a simple Assumption (hint: use
-     * {@link org.junit.jupiter.api.Assumptions#assumingThat(boolean, org.junit.jupiter.api.function.Executable)
-     * assumingThat()}) that today is Friday
-     * (or any other day of the week of your choosing, just so you pick one), or the test is skipped.</li>
-     * <li>Pass the following numbers as operands to the {@link com.makotojava.learn.hellojunit5.App#add(long[]) add}
-     * method: 1, 2, 3, 4, 5</li>
-     * <li>Ensure the actual sum matches the expected sum.</li>
-     * </ol>
-     */
+    @Test
+    @DisplayName("Heck if I know what Lambda is")
     public void testAdd_OnlyOnFriday_WithLambda() {
-      //
-      // EXERCISE: TODO: ADD CODE HERE (See Javadoc comments for instructions. Use the Javadoc View in Eclipse to see
-      // the buttery smooth javadoc above.)
-      //
-      fail("Test not implemented!");
+      assertNotNull(classUnderTest);
+      LocalDateTime ldt = LocalDateTime.now();
+      assumingThat(ldt.getDayOfWeek().getValue() == 5,
+          () -> {
+            long[] operands = { 1, 2, 3, 4, 5 };
+            long expectedSum = 15;
+            long actualSum = classUnderTest.add(operands);
+            assertEquals(expectedSum, actualSum);
+          });
     }
 
   }
@@ -206,119 +267,91 @@ public class JUnit5AppTest {
   /**
    * Class-level Exercises:
    * <ol>
-   * <li>Make this class a nested test class (hint: use {@link org.junit.jupiter.api.Nested @Nested}).
-   * <li>Give the class a cool {@link org.junit.jupiter.api.DisplayName @DisplayName} that shows up in the JUnit test
+   * <li>Make this class a nested test class (hint: use
+   * {@link org.junit.jupiter.api.Nested @Nested}).
+   * <li>Give the class a cool
+   * {@link org.junit.jupiter.api.DisplayName @DisplayName} that shows up in the
+   * JUnit test
    * report.</li>
    * </ol>
    * 
    */
+  @Nested
+  @DisplayName("One operand")
   class JUnit5AppSingleOperandTest {
 
-    /**
-     * testAdd_NumbersGt0() - Exercises:
-     * <ol>
-     * <li>Tell JUnit this method is a test method.</li>
-     * <li>Give it a cool display name for the test report.</li>
-     * <li>The reference to the class under test cannot be null. If it is, the test should fail.</li>
-     * <li>Create a group of two tests of the add methods with the following arrays of positive numbers:
-     * <ol>
-     * <li>1</li>
-     * <li>0</li>
-     * </ol>
-     * Ensure the actual sum matches the expected sum for each group of numbers. Make sure that all groups of numbers
-     * are
-     * tested (i.e., if one fails, it should not fail the test method). Hint: use
-     * {@link org.junit.jupiter.api.Assertions#assertAll(org.junit.jupiter.api.function.Executable...) assertAll()}
-     * </ol>
-     */
+    @Test
+    @DisplayName("Positive")
     public void testAdd_NumbersGt0() {
-      //
-      // EXERCISE: TODO: ADD CODE HERE (See Javadoc comments for instructions. Use the Javadoc View in Eclipse to see
-      // the buttery smooth javadoc above.)
-      //
-      fail("Test not implemented!");
+      assertNotNull(classUnderTest);
+      assertAll(
+          () -> {
+            long[] numbersToSum = { 1 };
+            long expectedSum = 1;
+            long actualSum = classUnderTest.add(numbersToSum);
+            assertEquals(expectedSum, actualSum);
+          },
+          () -> {
+            long[] numbersToSum = { 0 };
+            long expectedSum = 0;
+            long actualSum = classUnderTest.add(numbersToSum);
+            assertEquals(expectedSum, actualSum);
+          });
     }
 
-    /**
-     * testAdd_NumbersLt0() - Exercises:
-     * <ol>
-     * <li>Tell JUnit this method is a test method.</li>
-     * <li>Give it a cool display name for the test report.</li>
-     * <li>The reference to the class under test cannot be null. If it is, the test should fail.</li>
-     * <li>Create a group of two tests of the add methods with the following arrays of positive numbers:
-     * <ol>
-     * <li>-1</li>
-     * <li>-10</li>
-     * </ol>
-     * Ensure the actual sum matches the expected sum for each group of numbers. Make sure that all groups of numbers
-     * are
-     * tested (i.e., if one fails, it should not fail the test method). Hint: use
-     * {@link org.junit.jupiter.api.Assertions#assertAll(org.junit.jupiter.api.function.Executable...) assertAll()}
-     * </ol>
-     */
+    @Test
+    @DisplayName("Negative")
     public void testAdd_NumbersLt0() {
-      //
-      // EXERCISE: TODO: ADD CODE HERE (See Javadoc comments for instructions. Use the Javadoc View in Eclipse to see
-      // the buttery smooth javadoc above.)
-      //
-      fail("Test not implemented!");
+      assertNotNull(classUnderTest);
+      assertAll(
+          () -> {
+            long[] numbersToSum = { -1 };
+            long expectedSum = -1;
+            long actualSum = classUnderTest.add(numbersToSum);
+            assertEquals(expectedSum, actualSum);
+          },
+          () -> {
+            long[] numbersToSum = { -10 };
+            long expectedSum = -10;
+            long actualSum = classUnderTest.add(numbersToSum);
+            assertEquals(expectedSum, actualSum);
+          });
     }
   }
 
   /**
    * Class-level Exercises:
    * <ol>
-   * <li>Make this class a nested test class (hint: use {@link org.junit.jupiter.api.Nested @Nested}).
-   * <li>Give the class a cool {@link org.junit.jupiter.api.DisplayName @DisplayName} that shows up in the JUnit test
+   * <li>Make this class a nested test class (hint: use
+   * {@link org.junit.jupiter.api.Nested @Nested}).
+   * <li>Give the class a cool
+   * {@link org.junit.jupiter.api.DisplayName @DisplayName} that shows up in the
+   * JUnit test
    * report.</li>
    * </ol>
    * 
    */
+  @Nested
+  @DisplayName("No operands")
   class JUnit5AppZeroOperandsTest {
 
-    /**
-     * testAdd_ZeroOperands_EmptyArgument() - Exercises:
-     * <ol>
-     * <li>Tell JUnit this method is a test method.</li>
-     * <li>Give it a cool display name for the test report.</li>
-     * <li>The reference to the class under test cannot be null. If it is, the test should fail.</li>
-     * <li>Pass an empty array as operands argument to the {@link com.makotojava.learn.hellojunit5.App#add(long[]) add}
-     * method.</li>
-     * <li>Ensure that an {@link java.lang.IllegalArgumentException IllegalArgumentException} is thrown (hint: use the
-     * {@link org.junit.jupiter.api.Assertions#assertThrows(Class, org.junit.jupiter.api.function.Executable)
-     * assertThrows()} method).</li>
-     * </ol>
-     */
+    @Test()
+    @DisplayName("Abosultely nothing")
     public void testAdd_ZeroOperands_EmptyArgument() {
-      //
-      // EXERCISE: TODO: ADD CODE HERE (See Javadoc comments for instructions. Use the Javadoc View in Eclipse to see
-      // the buttery smooth javadoc above.)
-      //
-      fail("Test not implemented!");
+      assertNotNull(classUnderTest);
+      long[] numbersToSum = {};
+      assertThrows(IllegalArgumentException.class, () -> classUnderTest.add(numbersToSum));
     }
 
-    /**
-     * testAdd_ZeroOperands_NullArgument() - Exercises:
-     * <ol>
-     * <li>Tell JUnit this method is a test method.</li>
-     * <li>Give it a cool display name for the test report.</li>
-     * <li>The reference to the class under test cannot be null. If it is, the test should fail.</li>
-     * <li>Pass an empty array as operands argument to the {@link com.makotojava.learn.hellojunit5.App#add(long[]) add}
-     * method.</li>
-     * <li>Ensure that an {@link java.lang.IllegalArgumentException IllegalArgumentException} is thrown (hint: use the
-     * {@link org.junit.jupiter.api.Assertions#assertThrows(Class, org.junit.jupiter.api.function.Executable)
-     * assertThrows()} method).</li>
-     * <li>The test should fail if the message in the exception is not "Operands argument cannot be null".</li>
-     * </ol>
-     */
+    @Test
+    @DisplayName("If it's null")
     public void testAdd_ZeroOperands_NullArgument() {
-      //
-      // EXERCISE: TODO: ADD CODE HERE (See Javadoc comments for instructions. Use the Javadoc View in Eclipse to see
-      // the buttery smooth javadoc above.)
-      //
-      fail("Test not implemented!");
+      assertNotNull(classUnderTest);
+      long[] numbersToSum = null;
+      Throwable expectedException = assertThrows(IllegalArgumentException.class,
+          () -> classUnderTest.add(numbersToSum));
+      assertEquals("Bad bad", expectedException.getLocalizedMessage());
     }
 
   }
-
 }
-- 
2.41.0.windows.1

